@article{goodSurveys1,
  title={Designing and using research questionnaires},
  author={Rowley, Jenny},
  journal={Management research review},
  year={2014},
  publisher={Emerald Group Publishing Limited}
}
@article{goodSurveys2,
  title={Introduction to primary research: Observations, surveys, and interviews},
  author={Driscoll, Dana Lynn},
  journal={Writing spaces: Readings on writing},
  volume={2},
  pages={153--174},
  year={2011}
}
@article{javaLambdas,
author = {Mazinanian, Davood and Ketkar, Ameya and Tsantalis, Nikolaos and Dig, Danny},
title = {Understanding the Use of Lambda Expressions in Java},
year = {2017},
issue_date = {October 2017},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {1},
number = {OOPSLA},
url = {https://doi.org/10.1145/3133909},
doi = {10.1145/3133909},
abstract = { Java 8 retrofitted lambda expressions, a core feature of functional programming, into a mainstream object-oriented language with an imperative paradigm. However, we do not know how Java developers have adapted to the functional style of thinking, and more importantly, what are the reasons motivating Java developers to adopt functional programming. Without such knowledge, researchers miss opportunities to improve the state of the art, tool builders use unrealistic assumptions, language designers fail to improve upon their designs, and developers are unable to explore efficient and effective use of lambdas.  We present the first large-scale, quantitative and qualitative empirical study to shed light on how imperative programmers use lambda expressions as a gateway into functional thinking. Particularly, we statically scrutinize the source code of 241 open-source projects with 19,770 contributors, to study the characteristics of 100,540 lambda expressions. Moreover, we investigate the historical trends and adoption rates of lambdas in the studied projects. To get a complementary perspective, we seek the underlying reasons on why developers introduce lambda expressions, by surveying 97 developers who are introducing lambdas in their projects, using the firehouse interview method.  Among others, our findings revealed an increasing trend in the adoption of lambdas in Java: in 2016, the ratio of lambdas introduced per added line of code increased by 54% compared to 2015. Lambdas were used for various reasons, including but not limited to (i) making existing code more succinct and readable, (ii) avoiding code duplication, and (iii) simulating lazy evaluation of functions. Interestingly, we found out that developers are using Java's built-in functional interfaces inefficiently, i.e., they prefer to use general functional interfaces over the specialized ones, overlooking the performance overheads that might be imposed. Furthermore, developers are not adopting techniques from functional programming, e.g., currying. Finally, we present the implications of our findings for researchers, tool builders, language designers, and developers. },
journal = {Proc. ACM Program. Lang.},
month = oct,
articleno = {85},
numpages = {31},
keywords = {Multi-paradigm Programming, The Firehouse Interview Method, Java 8, Lambda Expressions, Empirical Studies, Functional Programming}
}
@book{cs5Spec,
  title={A Programmer's Guide to C\# 5.0},
  author={Gunnerson, Eric and Wienholt, Nick},
  year={2012},
  publisher={Apress}
}
@manual{cs6Spec,
  title={C\# 6.0 Draft Specification},
  author={Various},
  organization={Microsoft Corporation},
  year={2015}
}
@article{staticCodeAnalysis,
  title={Static code analysis},
  author={Louridas, Panagiotis},
  journal={Ieee Software},
  volume={23},
  number={4},
  pages={58--61},
  year={2006},
  publisher={IEEE}
}
@INPROCEEDINGS{paradigmForStyleResearch,
  author={Yang, Shouguo and Shi, Zhiqiang and Zhang, Guodong and Li, Mingxuan and Ma, Yuan and Sun, Limin},
  booktitle={ICC 2019 - 2019 IEEE International Conference on Communications (ICC)}, 
  title={Understand Code Style: Efficient CNN-Based Compiler Optimization Recognition System}, 
  year={2019},
  volume={},
  number={},
  pages={1-6},
  doi={10.1109/ICC.2019.8761073}
}
@inproceedings{autoStyleFeedbackAtScale,
author = {Moghadam, Joseph Bahman and Choudhury, Rohan Roy and Yin, HeZheng and Fox, Armando},
title = {AutoStyle: Toward Coding Style Feedback at Scale},
year = {2015},
isbn = {9781450334112},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2724660.2728672},
doi = {10.1145/2724660.2728672},
booktitle = {{Proceedings of the Second (2015) ACM Conference on Learning @ Scale}},
pages = {261â€“266},
numpages = {6},
keywords = {autograding, moocs, coding style},
location = {Vancouver, BC, Canada},
series = {{L@S '15}}
}
@InProceedings{scaleDrivenHints,
author="Roy Choudhury, Rohan
and Yin, Hezheng
and Fox, Armando",
editor="Micarelli, Alessandro
and Stamper, John
and Panourgia, Kitty",
title="Scale-Driven Automatic Hint Generation for Coding Style",
booktitle="Intelligent Tutoring Systems",
year="2016",
publisher="Springer International Publishing",
address="Cham",
pages="122--132",
}
@book{effectiveJava,
  address = {Boston, MA},
  author = {Bloch, Joshua},
  edition = {3},
  isbn = {978-0-13-468599-1},
  keywords = {01841 103 book shelf software development design java optimize},
  publisher = {Addison-Wesley},
  title = {Effective Java},
  year = {2018}
}
@misc{microsoftCSStyle,
  author = {Various},
  organization = {Microsoft Corporation},
  title = {C\# Coding Conventions (C\# Programming Guide)},
  year = {2021},
  url = {https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/inside-a-program/coding-conventions}
}
@misc{googleJSStyle,
  author = {Various},
  organization = {Google},
  title = {Google JavaScript Style Guide},
  url = {https://google.github.io/styleguide/jsguide.html}
}
@misc{airbnbJSStyle,
  author = {Various},
  organization = {Airbnb},
  title = {Airbnb JavaScript Style Guide},
  year = {2021},
  url = {https://github.com/airbnb/javascript}
}